import React, { useState } from "react";
import NavBar from "./NavBar";
import { useFormik } from "formik";
import { useNavigate } from "react-router-dom";
import { getRandomPrompt } from "../utils";
import { BACKEND_API } from "../utils/config";
import { toast } from "react-toastify";

const Create = () => {
  const [generatingImg, SetGeneratingImg] = useState(false);
  const [loading, setLoading] = useState(false);
  const [photo, setPhoto] = useState(null);
  const navigate = useNavigate();

  const generateImage = async (values) => {

    setPhoto(null);
    if (values.prompt) {
      try {
        SetGeneratingImg(true);
        const response = await fetch(`${BACKEND_API}/image`, {
          method: "POST",
          headers: {
            "Content-type": "application/json",
          },
          body: JSON.stringify({ prompt: values.prompt }),
        });

        if (!response.ok) {
          throw new Error(`Error: Please Try After some time`);
        }

        const data = await response.json();

        if (data.image) {
          setPhoto(data.image);
        } else {
          throw new Error("No image response");
        }
      } catch (error) {
        toast.error(error.message);
      } finally {
        SetGeneratingImg(false);
      }
    } else {
      toast.error("Please enter a prompt");
    }
  };

  const handleShare = async (e) => {
    e.preventDefault();

    if (values.prompt && photo) {
      setLoading(true);
      try {
        const response = await fetch(`${BACKEND_API}/post`, {
          method: "POST",
          headers: {
            "Content-type": "application/json",
          },
          body: JSON.stringify({ values, photo }),
        });
        await response.json();
        console.log(response.data);
        
        toast.success("Sheared to the community");
        navigate("/");
      } catch (err) {
        toast.error(err);
      } finally {
        setLoading(false);
      }
    } else {
      toast.warning("Please generate an image with proper details");
    }
  };

  const { values, handleChange, handleSubmit, setFieldValue } = useFormik({
    initialValues: {
      name: "",
      prompt: "",
    },
    onSubmit: generateImage,
  });

  const handleSurpriseMe = () => {
    const randomPrompt = getRandomPrompt(values.prompt);
    setFieldValue("prompt", randomPrompt);
  };

  return (
    <>
      <NavBar />
      <div className="container">
        <div className="row">
          <div className="col-lg-6 col-sm-12">
            <div className="mt-3">
              <h1 className="my-2">Create</h1>
              <p>
                Create imaginative and visually stunning images generated by
                HUGGING-FACE AI and share them with the community
              </p>
            </div>
            <form onSubmit={handleSubmit}>
              <div className="mb-3">
                <label htmlFor="name" className="form-label">
                  Name
                </label>
                <input
                  type="text"
                  className="form-control"
                  id="name"
                  placeholder="Enter name"
                  onChange={handleChange}
                  value={values.name}
                  required
                />
              </div>
              <div className="mb-3">
                <label htmlFor="prompt" className="form-label">
                  Prompt
                </label>

                <button
                  type="button"
                  onClick={handleSurpriseMe}
                  className="btn btn-light fw-semibold fs-6 py-1 px-2 rounded-2 text-dark mx-3 mb-1"
                >
                  Surprise me
                </button>

                <textarea
                  className="form-control"
                  id="prompt"
                  placeholder="Enter Prompt"
                  rows="1"
                  onChange={handleChange}
                  value={values.prompt}
                  required
                ></textarea>
              </div>
              <div className="gen-img d-flex justify-content-center align-items-center p-3 mt-4">
                {photo ? (
                  <div className=" ">
                    <img
                      src={photo}
                      alt="Generated"
                      style={{ maxWidth: "100%", maxHeight: "500px" }}
                    />
                  </div>
                ) : (
                  <>
                    <div className="preview_img"></div>
                  </>
                )}
                {generatingImg && (
                  <div className="position-absolute top-50 start-50 translate-middle z-0">
                    <div className="preview_loader "></div>
                  </div>
                )}
              </div>

              <div>
                <button
                  type="submit"
                  className="gen-btn py-2 px-5 mt-3"
                  disabled={generatingImg}
                >
                  {generatingImg ? (
                    <>
                      <span>Generating . . .</span>
                      <span className="loader ps-2"></span>
                    </>
                  ) : (
                    "Generate"
                  )}
                </button>
              </div>
            </form>

            <div className="mt-3">
              <p>
                Once you have created the image you want, you can share it with
                others in the community.
              </p>
              <button
                type="button"
                className="share-btn py-2 px-5 my-3"
                onClick={handleShare}
              >
                {loading ? (
                  <>
                    <span>Sharing . . .</span>
                    <span className="loader ps-2"></span>
                  </>
                ) : (
                  "Share with the community"
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Create;
